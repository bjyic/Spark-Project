import fellow
import typecheck

@fellow.app.task(name="spark.upvote_percentage_by_favorites")
@typecheck.returns("50 * (count, number)")
def upvote_percentage_by_favorites():
    return [(0,0.6817810799051467), (1,0.6859570701911524), (2,0.884491535776834), (3,0.9531522579446469), (4,0.9737919963202235), (5,0.9809309492967215), (6,0.9835588078717944), (7,0.985640829779598), (8,0.9863184412250775), (9,0.9875252382186059), (10,0.9867704988607219), (11,0.9878685521050371), (12,0.9877730133270066), (13,0.9888603501684652), (14,0.9901639393607043), (15,0.9889838251404498), (16,0.9888527369191137), (17,0.9893048601015232), (18,0.9901838785488455), (19,0.9899994055855836), (20,0.989091344140148), (21,0.9902270128597437), (22,0.9895554068345637), (23,0.9898202875433159), (24,0.9893785998637602), (25,0.9899755103960016), (26,0.9916097931835697), (27,0.990375980569054), (28,0.9900978243492496), (29,0.9912477538059211), (30,0.9900823400562039), (31,0.9917077982593175), (32,0.9901555367239345), (33,0.9914198376699365), (34,0.99123176994005), (35,0.9909959529241918), (36,0.9924110992878186), (37,0.991165199859354), (38,0.9888931629491636), (39,0.9921956399448998), (40,0.99363064381353), (41,0.9909749826802338), (42,0.9932483023391396), (43,0.9926811486532823), (44,0.9902192661100128), (45,0.9929884261136677), (46,0.9926676633742441), (47,0.9905484101278473), (48,0.9887628025561604), (49,0.9920897307663101)]
    #return [(20, 0.9952153110047847)] * 50


@fellow.app.task(name="spark.user_answer_percentage_by_reputation")
@typecheck.returns("100 * (number, number)")
def user_answer_percentage_by_reputation():
    return [(919,0.996694214876033), (805,0.9959749552772809), (686,0.9803049555273189), (7290,0.9918887601390498), (930,0.9817351598173516), (4505,1.0), (4253,0.9909747292418772), (183,0.847870182555781), (11032,0.9875647668393782), (28746,0.968421052631579), (887,0.9794871794871794), (159,0.9728813559322034), (2116,0.9833333333333333), (4856,0.9543147208121827), (22047,1.0), (5739,0.9872773536895675), (3277,0.956081081081081), (88,0.9660493827160493), (2970,1.0), (601,0.9772151898734177), (17230,0.9970059880239521), (449,1.0), (2392,0.9724137931034482), (1390,0.9411764705882353), (5836,0.846441947565543), (7555,1.0), (603,0.8158844765342961), (7972,0.9823008849557522), (6633,0.9912280701754386), (2958,0.9930313588850174), (9394,0.9700854700854701), (7828,0.9850427350427351), (2817,0.8206896551724138), (7224,0.9757575757575757), (4598,0.9857142857142858), (7071,0.9107142857142857), (1739,0.9948717948717949), (1036,0.9545454545454546), (3382,1.0), (8013,0.9040697674418605), (3019,0.8571428571428571), (4376,0.963302752293578), (251,0.9924242424242424), (28666,0.9), (1764,0.9325842696629213), (23853,1.0), (32036,0.9959839357429718), (10849,0.9518072289156626), (26338,0.9691358024691358), (1352,0.9902912621359223), (401,0.9119496855345912), (5,0.8547008547008547), (8,0.8991596638655462), (7250,0.9877300613496932), (1909,0.9518072289156626), (21054,0.9345794392523364), (4257,0.9757575757575757), (196,0.7357512953367875), (442,0.8712121212121212), (279,1.0), (2669,0.946843853820598), (8402,0.6521739130434783), (36041,0.9889807162534435), (2126,1.0), (44269,0.9033613445378151), (6029,1.0), (11981,0.9649122807017544), (1934,0.9680851063829787), (795,0.676056338028169), (25433,0.9867256637168141), (253,0.3695652173913043), (364,0.6736111111111112), (25,0.9166666666666666), (22311,0.9401709401709402), (334,1.0), (13047,0.9733333333333334), (8507,0.9428571428571428), (264,0.90625), (14188,0.8983050847457628), (307,1.0), (8076,0.9333333333333333), (5862,1.0), (8413,0.9836065573770492), (1307,0.8333333333333334), (2860,0.8903225806451613), (223,0.8588235294117647), (11887,0.976878612716763), (52554,0.9652777777777778), (2074,1.0), (35989,0.9487179487179487), (1005,0.0034482758620689655), (22228,0.8513513513513513), (4862,0.8974358974358975), (3601,0.9852941176470589), (17908,1.0), (13138,0.8639455782312925), (1108,0.9722222222222222), (1679,0.941747572815534), (11852,1.0), (-1,0.19991701720554747)]
    #return [(7071, 0.9107142857142857)] * 100


@fellow.app.task(name="spark.user_reputation_by_tenure")
@typecheck.returns("100 * (count, number)")
def user_reputation_by_tenure():
    return [(2325,92624.0), (1663,47334.0), (1287,100976.0), (1018,46907.0), (965,23102.0), (695,27599.0), (570,22706.0), (558,25406.0), (495,9294.0), (494,23610.0), (469,10728.0), (452,32283.0), (424,16854.0), (419,17719.0), (395,14100.0), (390,20315.0), (369,19312.0), (363,6149.0), (350,9047.0), (345,14768.0), (343,13557.0), (339,11795.0), (338,10045.0), (304,16131.0), (301,6352.0), (297,20133.0), (292,10552.0), (290,8285.5), (287,11083.0), (282,10383.0), (277,11830.0), (269,7729.0), (268,11989.0), (267,7971.0), (265,7765.0), (257,13078.0), (248,7608.0), (247,12496.5), (239,1.0), (234,11307.5), (228,11662.0), (226,5775.0), (218,5849.0), (211,7552.0), (208,6208.0), (202,9530.0), (195,9619.0), (193,6682.0), (188,12098.0), (187,8013.0), (185,4149.0), (184,5762.0), (177,5042.0), (173,10394.0), (168,7725.0), (167,3957.0), (165,6694.0), (164,1544.0), (163,6888.0), (161,6367.0), (159,7116.0), (157,6040.0), (156,4086.6666666666665), (155,4204.0), (150,5398.0), (147,3821.0), (146,4127.0), (145,2189.0), (144,4943.0), (140,1063.0), (133,8794.0), (132,7404.5), (131,1875.0), (128,5085.0), (124,3650.0), (122,2401.0), (119,6948.0), (118,3736.5), (117,5237.0), (114,5970.0), (113,1267.0), (112,2052.5), (111,2533.0), (110,2992.0), (109,8629.0), (107,6430.5), (105,3890.0), (103,3747.0), (101,2597.0), (99,2465.3333333333335), (98,1584.0), (96,2336.0), (94,4668.0), (90,3315.5), (88,3036.5), (87,2110.0), (86,1282.0), (85,2054.3333333333335), (84,3880.5), (83,3237.5)]
#    return [(118, 3736.5)] * 100

@fellow.app.task(name="spark.quick_answers_by_hour")
@typecheck.returns("24 * number")
def quick_answers_by_hour():
    return [0.4504672897196262, 0.44814814814814813, 0.3605577689243028, 0.3799126637554585, 0.4028436018957346, 0.4125, 0.4597402597402597, 0.4673684210526316, 0.4616822429906542, 0.49528301886792453, 0.5157593123209169, 0.5445682451253482, 0.5347313237221494, 0.5310796074154853, 0.5238095238095238, 0.5368007850834151, 0.5475728155339806, 0.47995991983967934, 0.5202185792349727, 0.5462012320328542, 0.5196408529741863, 0.5156794425087108, 0.46153846153846156, 0.4700460829493088]
#    return [0.] * 24


@fellow.app.task(name="spark.quick_answers_by_hour_full")
@typecheck.returns("24 * number")
def quick_answers_by_hour_full():
    return [0.6905196588187182, 0.6960187353629976, 0.6996508810120343, 0.7043822789835892, 0.7101039989211401, 0.717895521548329, 0.7242206235011991, 0.7270676289762096, 0.7261497851027108, 0.7229066042185035, 0.7285320315719402, 0.7372789285988344, 0.7444660499283091, 0.7452482064441512, 0.7414569607227338, 0.7344429572371542, 0.7349356935222515, 0.7395061775313437, 0.746356489178229, 0.7475957817529459, 0.7360075846737283, 0.71589624460808, 0.7018022624812156, 0.694720298548583]

    #return [0.] * 24

keys = ["vet_views", "vet_score", "vet_favorites", "vet_answers",
        "brief_views", "brief_score", "brief_favorites", "brief_answers"]

@fellow.app.task(name="spark.identify_veterans_from_first_post_stats")
@typecheck.returns_dict("number", keys)
def identify_veterans_from_first_post_stats():
    return {"vet_views": 927.7042864894195,
            "vet_score": 3.5322843190450355,
            "vet_favorites": 1.2930005425935973,
            "vet_answers": 1.2962561041779708,
            "brief_views": 552.9681912290608,
            "brief_score": 2.1001317523056655,
            "brief_favorites": 0.5757105213626953,
            "brief_answers": 0.9704968944099379
            }


@fellow.app.task(name="spark.identify_veterans_from_first_post_stats_full")
@typecheck.returns_dict("number", keys)
def identify_veterans_from_first_post_stats_full():
    return {"vet_views": 1841.8189951718825,
            "vet_score": 2.2561266751584585,
            "vet_favorites": 0.8661474978452715,
            "vet_answers": 1.841804785404288,
            "brief_views": 1095.1468872554271,
            "brief_score": 1.129298016272707,
            "brief_favorites": 0.3854817164205759,
            "brief_answers": 1.5033659787554736
            }

@fellow.app.task(name="spark.word2vec")
@typecheck.returns("25 * (string, number)")
def word2vec():
    return [("lattice",2.9168489530949024), ("shiny",2.6896806922258265), ("data.table",2.68654423850359),
("boxplot",2.678821297362369), ("r-grid",2.6580459210889407), ("na",2.635645215848231),
("aesthetics",2.624916204463413), ("plyr",2.6193062370632454), ("geom-bar",2.6185360918887235),
("dplyr",2.6170024831330374), ("data.frame",2.6155186602665883), ("levelplot",2.609254194686531),
("rgl",2.606366158256316), ("lm",2.60368124379365), ("loess",2.5808953469802196), ("vegan",2.5723217654627955),
("r-factor",2.5642919277150127), ("gmisc",2.5584521811046526), ("sqldf",2.553074409038626),
("plotrix",2.5498753080940086), ("quantmod",2.549568471057951), ("bioconductor",2.545411537342643),
("bwplot",2.5447969918309217), ("facet-wrap",2.5361016131061658), ("read.table",2.534921250833664)]
    #return [("data.frame", 2.479299366496595)] * 25
